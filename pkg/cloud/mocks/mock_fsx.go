// Code generated by MockGen. DO NOT EDIT.
// Source: sigs.k8s.io/aws-fsx-csi-driver/pkg/cloud (interfaces: FSx)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	fsx "github.com/aws/aws-sdk-go/service/fsx"
	gomock "github.com/golang/mock/gomock"
)

// MockFSx is a mock of FSx interface.
type MockFSx struct {
	ctrl     *gomock.Controller
	recorder *MockFSxMockRecorder
}

// MockFSxMockRecorder is the mock recorder for MockFSx.
type MockFSxMockRecorder struct {
	mock *MockFSx
}

// NewMockFSx creates a new mock instance.
func NewMockFSx(ctrl *gomock.Controller) *MockFSx {
	mock := &MockFSx{ctrl: ctrl}
	mock.recorder = &MockFSxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFSx) EXPECT() *MockFSxMockRecorder {
	return m.recorder
}

// CreateDataRepositoryAssociationWithContext mocks base method.
func (m *MockFSx) CreateDataRepositoryAssociationWithContext(arg0 context.Context, arg1 *fsx.CreateDataRepositoryAssociationInput, arg2 ...request.Option) (*fsx.CreateDataRepositoryAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDataRepositoryAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.CreateDataRepositoryAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataRepositoryAssociationWithContext indicates an expected call of CreateDataRepositoryAssociationWithContext.
func (mr *MockFSxMockRecorder) CreateDataRepositoryAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataRepositoryAssociationWithContext", reflect.TypeOf((*MockFSx)(nil).CreateDataRepositoryAssociationWithContext), varargs...)
}

// CreateFileSystemWithContext mocks base method.
func (m *MockFSx) CreateFileSystemWithContext(arg0 context.Context, arg1 *fsx.CreateFileSystemInput, arg2 ...request.Option) (*fsx.CreateFileSystemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFileSystemWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.CreateFileSystemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFileSystemWithContext indicates an expected call of CreateFileSystemWithContext.
func (mr *MockFSxMockRecorder) CreateFileSystemWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileSystemWithContext", reflect.TypeOf((*MockFSx)(nil).CreateFileSystemWithContext), varargs...)
}

// DeleteDataRepositoryAssociationWithContext mocks base method.
func (m *MockFSx) DeleteDataRepositoryAssociationWithContext(arg0 context.Context, arg1 *fsx.DeleteDataRepositoryAssociationInput, arg2 ...request.Option) (*fsx.DeleteDataRepositoryAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDataRepositoryAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.DeleteDataRepositoryAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDataRepositoryAssociationWithContext indicates an expected call of DeleteDataRepositoryAssociationWithContext.
func (mr *MockFSxMockRecorder) DeleteDataRepositoryAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataRepositoryAssociationWithContext", reflect.TypeOf((*MockFSx)(nil).DeleteDataRepositoryAssociationWithContext), varargs...)
}

// DeleteFileSystemWithContext mocks base method.
func (m *MockFSx) DeleteFileSystemWithContext(arg0 context.Context, arg1 *fsx.DeleteFileSystemInput, arg2 ...request.Option) (*fsx.DeleteFileSystemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFileSystemWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.DeleteFileSystemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFileSystemWithContext indicates an expected call of DeleteFileSystemWithContext.
func (mr *MockFSxMockRecorder) DeleteFileSystemWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFileSystemWithContext", reflect.TypeOf((*MockFSx)(nil).DeleteFileSystemWithContext), varargs...)
}

// DescribeDataRepositoryAssociationsWithContext mocks base method.
func (m *MockFSx) DescribeDataRepositoryAssociationsWithContext(arg0 context.Context, arg1 *fsx.DescribeDataRepositoryAssociationsInput, arg2 ...request.Option) (*fsx.DescribeDataRepositoryAssociationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDataRepositoryAssociationsWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.DescribeDataRepositoryAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDataRepositoryAssociationsWithContext indicates an expected call of DescribeDataRepositoryAssociationsWithContext.
func (mr *MockFSxMockRecorder) DescribeDataRepositoryAssociationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDataRepositoryAssociationsWithContext", reflect.TypeOf((*MockFSx)(nil).DescribeDataRepositoryAssociationsWithContext), varargs...)
}

// DescribeFileSystemsWithContext mocks base method.
func (m *MockFSx) DescribeFileSystemsWithContext(arg0 context.Context, arg1 *fsx.DescribeFileSystemsInput, arg2 ...request.Option) (*fsx.DescribeFileSystemsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFileSystemsWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.DescribeFileSystemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFileSystemsWithContext indicates an expected call of DescribeFileSystemsWithContext.
func (mr *MockFSxMockRecorder) DescribeFileSystemsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFileSystemsWithContext", reflect.TypeOf((*MockFSx)(nil).DescribeFileSystemsWithContext), varargs...)
}

// UpdateFileSystemWithContext mocks base method.
func (m *MockFSx) UpdateFileSystemWithContext(arg0 context.Context, arg1 *fsx.UpdateFileSystemInput, arg2 ...request.Option) (*fsx.UpdateFileSystemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFileSystemWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.UpdateFileSystemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFileSystemWithContext indicates an expected call of UpdateFileSystemWithContext.
func (mr *MockFSxMockRecorder) UpdateFileSystemWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFileSystemWithContext", reflect.TypeOf((*MockFSx)(nil).UpdateFileSystemWithContext), varargs...)
}
